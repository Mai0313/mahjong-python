name: build-release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  REQUIREMENTS_FILE: requirements_build.txt
  PYINSTALLER_FILE: main.py

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.9'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: build executable for ${{ runner.os }}
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r ${{ env.REQUIREMENTS_FILE }}
          pyinstaller --onefile ${{ env.PYINSTALLER_FILE }} -n ${{ github.event.repository.name }}

      # Optionally verify that it works (provided that it does not need user interaction)
      - name: Upload Artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ github.event.repository.name }}_${{ runner.os }}
          path: ./*
          if-no-files-found: warn
          retention-days: 1
          compression-level: 6
          overwrite: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Release ${{ github.run_id }}
          draft: true
          prerelease: false

      - name: Upload Release Assets
        continue-on-error: true
        id: upload-release-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ github.event.repository.name }}_${{ runner.os }}${{ runner.os == 'Windows' && '.exe' || '' }}
          asset_name: ${{ github.event.repository.name }}_${{ runner.os }}${{ runner.os == 'Windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream

  release:
    runs-on: ubuntu-latest
    # container: catthehacker/ubuntu:act-20.04  # Uncomment it if you use it on Gitea

    needs:
      - build

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - name: Draft Release
        uses: release-drafter/release-drafter@v5.25.0
        id: draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          publish: true
